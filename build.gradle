plugins {
    id "java"
    id "idea"
    id "jacoco"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
    id "org.asciidoctor.gradle.asciidoctor" version "1.5.1"
    id "org.springframework.boot" version "2.1.7.RELEASE"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply from: "libraries.gradle"

sourceCompatibility = 1.11
targetCompatibility = 1.11

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    jcenter()
}

task stubsJar(type: Jar) {
    archiveClassifier = "stubs"
    into("META-INF/${project.group}/${project.name}/${project.version}/mappings") {
        include('**/*.*')
        from("${project.buildDir}/generated-snippets/stubs")
    }
    into("META-INF/${project.group}/${project.name}/${project.version}/contracts") {
        include('**/*.groovy')
        from("${project.buildDir}/generated-snippets/contracts")
    }
}

stubsJar.dependsOn(test)
build.dependsOn(stubsJar)

artifacts {
    archives stubsJar
}

publishing {
    publications {
        stubs(MavenPublication) {
            artifact stubsJar
            artifactId delivery
        }
    }
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_TOKEN")
    publications = ['stubs']
    publish = true
    pkg {
        repo = 'scc-microservices'
        name = "delivery"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
    htmlOutputDir = file('build/generated-docs')
}

asciidoctor {
    dependsOn test

    backends = ['html5']
    attributes = [
            'source-highlighter': 'highlightjs',
            'toc'               : 'left',
            'toclevels'         : 2,
            'numbered'          : '',
            'icons'             : 'font',
            'setanchors'        : '',
            'idprefix'          : '',
            'idseparator'       : '-',
            'docinfo1'          : '',
            'safe-mode-unsafe'  : '',
            'allow-uri-read'    : '',
            'snippets'          : snippetsDir,
            linkattrs           : true,
            encoding            : 'utf-8'
    ]

    inputs.dir snippetsDir
    outputDir htmlOutputDir
    sourceDir 'src/docs/asciidoc'
}

dependencies {
    // Spring
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"

    // DB
    implementation "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core"

    // Common
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

    // Utils
    compileOnly "com.google.code.findbugs:jsr305:${findBugsVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "org.springframework.cloud:spring-cloud-contract-spec:${springContractVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock:${springContractVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier:${springContractVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:${springContractVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor"
}