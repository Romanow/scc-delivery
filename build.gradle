plugins {
    id "idea"
    id "jacoco"
    id "maven-publish"
    id "org.asciidoctor.jvm.convert" version "3.3.0"
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.4.10"
    id "org.springframework.boot" version "2.5.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

[compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = "11"

ext {
    springCloudVersion = "3.0.3"
    gsonVersion = "2.8.7"
    guavaVersion = "30.1.1-jre"
    openApiVersion = "1.5.10"
    commonsLangVersion = "3.12.0"
    hibernateTypesVersion = "2.10.4"
    postgresContainerVersion = "1.15.2"

    snippetsDir = file("build/generated-snippets")
    htmlOutputDir = file("build/generated-docs")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:$springCloudVersion"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
}

task stubsJar(type: Jar) {
    archiveClassifier = "stubs"
    into("META-INF/${project.group}/${project.name}/${project.version}/mappings") {
        include("**/*.*")
        from("${project.buildDir}/generated-snippets/stubs")
    }
    into("META-INF/${project.group}/${project.name}/${project.version}/contracts") {
        include("**/*.groovy")
        from("${project.buildDir}/generated-snippets/contracts")
    }
}

stubsJar.dependsOn(test)
build.dependsOn(stubsJar)

artifacts {
    archives stubsJar
}

publishing {
    publications {
        stubs(MavenPublication) {
            artifact stubsJar
            artifactId "delivery"
            pom {
                name = "Delivery Service stubs"
                description = "Delivery stubs, generated by tests"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "Romanov Alex"
                        email = "romanowalex@mail.ru"
                    }
                }
                scm {
                    url = "https://github.com/Romanow/scc-delivery/"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv("ARTIFACTORY_USER")
                password = System.getenv("ARTIFACTORY_PASSWORD")
            }

            if (project.version.endsWith("-SNAPSHOT")) {
                url = "https://romanow.jfrog.io/artifactory/scc-libs-snapshot/"
            } else {
                url = "https://romanow.jfrog.io/artifactory/scc-libs-release/"
            }
        }
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"

    implementation "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core"

    implementation "org.springdoc:springdoc-openapi-ui:$openApiVersion"
    implementation "org.springdoc:springdoc-openapi-kotlin:$openApiVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    implementation "com.google.guava:guava:$guavaVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier"
    testImplementation "org.testcontainers:postgresql:$postgresContainerVersion"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
}

asciidoctor {
    dependsOn test

    sourceDir "src/docs/asciidoc"
    outputDir htmlOutputDir

    attributes = [
            "snippets": snippetsDir,
            "encoding": "utf-8"
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "${project.name}.jar"
    layered {
        enabled = true
    }
}